targets="enforce_crash ced_to_patch ced_to_cep cep_interpreter.o"
# foo={a,b,c} turns out not to do brace expansion; not sure why.  $()
# expansion does, though, so use that instead.  Meh.
sources=$(echo {simplify_ordering,enumNeededExpressions,expressiondominatormap,instructiondominatormap,intern,thread_cfg_decode,expressionstashmapt}.cpp)

defvars() {
    cat <<EOF
ECRASH_COMMON_SOURCES=$(echo " $sources" | sed "s% % ${input_base}/%g")
ECRASH_SOURCES=\$(ECRASH_COMMON_SOURCES) $(echo " $targets" | sed "s% \([a-z_]*\)% ${input_base}/\1.cpp%g")
ECRASH_COMMON_OBJECTS=\$(patsubst %.cpp,%.o,\$(ECRASH_COMMON_SOURCES))
ECRASH_OBJECTS=\$(patsubst %.cpp,%.o,\$(ECRASH_SOURCES))
ECRASH_DEPS=\$(patsubst %.cpp,%.cpp.d,\$(ECRASH_SOURCES))
all_sources+=\$(ECRASH_SOURCES)
EOF
}

rules() {
    cat <<EOF
\$(ECRASH_OBJECTS): CPPFLAGS+=-Isli -I\$(libvex)/pub
\$(ECRASH_DEPS): CPPFLAGS+=-Isli -I\$(libvex)/pub
$targets: slir.a libVEX.a

enforce_crash: \$(ECRASH_COMMON_OBJECTS) ${input_base}/enforce_crash.o
	gcc -lsqlite3 -lrt \$(PROFILE_FLAGS) -lstdc++ \$^ -o \$@
ced_to_patch: \$(ECRASH_COMMON_OBJECTS) ${input_base}/ced_to_patch.o
	gcc -lsqlite3 -lrt \$(PROFILE_FLAGS) -lstdc++ \$^ -o \$@
ced_to_cep: \$(ECRASH_COMMON_OBJECTS) ${input_base}/ced_to_cep.o
	gcc -lsqlite3 -lrt \$(PROFILE_FLAGS) -lstdc++ \$^ -o \$@
cep_interpreter.o: ${input_base}/cep_interpreter.h ${input_base}/cep_interpreter.c
	gcc -g -fPIC -Wall ${input_base}/cep_interpreter.c -c -o \$@
${input_base}/cep_interpreter.cpp.o.d: # Silly hack to keep build system happy
	touch ${input_base}$@
EOF
}
