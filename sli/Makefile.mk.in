subdirs="enforce_crash"
targets="crop binpatch dbg chunk direct dbg_core get_dominator direct_cd static dbg_exec minimal_direct"

defvars() {
	echo SLIR_SOURCES= ${input_base}/{ssa,transform_expr,logwriter,thread,machinestate}.cpp
	echo SLIR_SOURCES+= ${input_base}/{util,memorychunk,logreader,syscalls,nd_chooser}.cpp
	echo SLIR_SOURCES+= ${input_base}/{debug,addressspace,replay,crash_summary}.cpp
	echo SLIR_SOURCES+= ${input_base}/{pmap,vamap,interpreter,coredump,dominators}.cpp
	echo SLIR_SOURCES+= ${input_base}/{state_machine,oracle,simplify_irexpr,eval_state_machine}.cpp
	echo SLIR_SOURCES+= ${input_base}/{mapping,elf_exec,offline_analysis,genfix,cnf,intern}.cpp
	echo SLIR_SOURCES+= ${input_base}/{StateMachineTransformer,IRExprTransformer}.cpp
	echo SLIR_TARGETS=${targets}
	cat <<EOF
SLIR_OBJECTS=\$(patsubst %.cpp,%.o,\$(SLIR_SOURCES))
SLIR_DEPS=\$(patsubst %.cpp,%.cpp.d,\$(SLIR_SOURCES))
SLIR_TARGET_SOURCES=\$(patsubst %,${input_base}/%.cpp,\$(SLIR_TARGETS))
SLIR_TARGET_OBJECTS=\$(patsubst %.cpp,%.o,\$(SLIR_TARGET_SOURCES))
SLIR_TARGET_DEPS=\$(patsubst %.cpp,%.cpp.d,\$(SLIR_TARGET_SOURCES))
all_sources+=\$(SLIR_SOURCES) \$(SLIR_TARGET_SOURCES)
clean_files+=slir.a
EOF
}

rules() {
    cat <<EOF
\$(SLIR_OBJECTS) \$(SLIR_TARGET_OBJECTS): CPPFLAGS+=-Isli -I\$(libvex)/pub
\$(SLIR_DEPS) \$(SLIR_TARGET_DEPS): CPPFLAGS+=-Isli -I\$(libvex)/pub
$targets: slir.a libVEX.a
${input_base}/interpreter.o: CPPFLAGS+=-I\$(libvex)/priv
${input_base}/interpreter.cpp.d: CPPFLAGS+=-I\$(libvex)/priv
${input_base}/syscalls.o: CPPFLAGS+=-I\$(libvex)/priv
${input_base}/syscalls.cpp.d: CPPFLAGS+=-I\$(libvex)/priv
${input_base}/direct.o: CPPFLAGS+=-I\$(libvex)/priv
${input_base}/direct.cpp.d: CPPFLAGS+=-I\$(libvex)/priv

slir.a: \$(SLIR_OBJECTS)
	rm -f \$@ ; ar rcs \$@ \$^
EOF

	for t in $targets
	do
	    cat <<EOF
$t: ${input_base}/${t}.o
	gcc -lsqlite3 -lrt \$(PROFILE_FLAGS) -lstdc++ \$^ -o \$@
EOF
	done
}