subdirs="enforce_crash"
targets="crop binpatch dbg chunk direct dbg_core get_dominator dbg_exec minimal_direct build_types_db dump_types_db check_types_index"
targets="${targets} canonicalise_types_table canonicalise_crash_summary compare_crash_summaries canonicalise_crash_summary2"
targets="${targets} remove_non_badptrs canonicalise_crash_summary3 canonicalise_crash_summary0 canonicalise_crash_summary4"
targets="${targets} case_split_summaries memloc_split_summaries dump_alias_db check_cfg_generation cross_check_machines"

defvars() {
	echo SLIR_SOURCES= ${input_base}/{ssa,transform_expr,logwriter,thread,machinestate}.cpp
	echo SLIR_SOURCES+= ${input_base}/{util,memorychunk,logreader,syscalls,nd_chooser}.cpp
	echo SLIR_SOURCES+= ${input_base}/{debug,addressspace,replay,crash_summary,phi_elimination}.cpp
	echo SLIR_SOURCES+= ${input_base}/{pmap,vamap,interpreter,coredump,dominators,interval_simplify}.cpp
	echo SLIR_SOURCES+= ${input_base}/{state_machine,oracle,simplify_irexpr,eval_state_machine}.cpp
	echo SLIR_SOURCES+= ${input_base}/{mapping,elf_exec,offline_analysis,genfix,intern}.cpp
	echo SLIR_SOURCES+= ${input_base}/{StateMachineTransformer,IRExprTransformer,proximal_cause}.cpp
	echo SLIR_SOURCES+= ${input_base}/{availExpressionAnalysis,deadcode,control_domination_map}.cpp
	echo SLIR_SOURCES+= ${input_base}/{bisimilarity,nf,typesdb,timers,realias,undefinedness}.cpp
	echo SLIR_SOURCES+= ${input_base}/{getStoreCFGs,dupeStateMachine,MachineAliasingTable}.cpp
	echo SLIR_SOURCES+= ${input_base}/{cfgnode,getProbeCFGs,probeCFGtoMachine,useInitialMemoryLoads}.cpp
	echo SLIR_SOURCES+= ${input_base}/{quickcheck_expr,sat_checker,smb_builder,remove_local_survival}.cpp
	echo SLIR_TARGETS=${targets}
	cat <<EOF
ifeq (\$(SELECTIVE_PROFILING),y)
SLIR_SOURCES+=${input_base}/profiler.cpp
endif
SLIR_OBJECTS=\$(patsubst %.cpp,%.o,\$(SLIR_SOURCES))
SLIR_DEPS=\$(patsubst %.cpp,%.cpp.d,\$(SLIR_SOURCES))
SLIR_TARGET_SOURCES=\$(patsubst %,${input_base}/%.cpp,\$(SLIR_TARGETS))
SLIR_TARGET_OBJECTS=\$(patsubst %.cpp,%.o,\$(SLIR_TARGET_SOURCES))
SLIR_TARGET_DEPS=\$(patsubst %.cpp,%.cpp.d,\$(SLIR_TARGET_SOURCES))
all_sources+=\$(SLIR_SOURCES) \$(SLIR_TARGET_SOURCES)
clean_files+=slir.a
EOF
}

rules() {
    cat <<EOF
\$(SLIR_OBJECTS) \$(SLIR_TARGET_OBJECTS): CPPFLAGS+=-Isli -I\$(libvex)/pub
\$(SLIR_DEPS) \$(SLIR_TARGET_DEPS): CPPFLAGS+=-Isli -I\$(libvex)/pub
$targets: slir.a libVEX.a
${input_base}/interpreter.o: CPPFLAGS+=-I\$(libvex)/priv
${input_base}/interpreter.cpp.d: CPPFLAGS+=-I\$(libvex)/priv
${input_base}/syscalls.o: CPPFLAGS+=-I\$(libvex)/priv
${input_base}/syscalls.cpp.d: CPPFLAGS+=-I\$(libvex)/priv
${input_base}/direct.o: CPPFLAGS+=-I\$(libvex)/priv
${input_base}/direct.cpp.d: CPPFLAGS+=-I\$(libvex)/priv

slir.a: \$(SLIR_OBJECTS)
	rm -f \$@ ; ar rcs \$@ \$^
EOF

	for t in $targets
	do
	    cat <<EOF
$t: ${input_base}/${t}.o
	gcc -lsqlite3 -lrt \$(PROFILE_FLAGS) -lgcc -lstdc++ -lm \$^ -o \$@
EOF
	done
}