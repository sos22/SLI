MD_TEST_DIR=md_test_dir
targets=${MD_TEST_DIR}/harness

emit_rules_for_bug() {
    echo "# emit_rules_for_bug $*"
    local bugname="${MD_TEST_DIR}/$1"
    local exename="${MD_TEST_DIR}/$2"
    local nr_bugs="$3"
    local static_files="${exename}.exe ${exename}.types.canon ${exename}.bcg ${exename}.db"
    local include_perf
    # Bug 16 can never reproduce, which makes the performance tests
    # run forever.  Exclude it from the perf tests.
    if [ "$nr_bugs" = 1 ] && [ "$2" != 16 ] && [ "$2" != 12 ]  && [ "$2" != 13 ]
    then
	include_perf=y
    fi

    # Bug 17 only works in some very specific configurations,
    # deliberately.  Don't include it in the default test set.
    if [ "$1" != "bug17~0" ] && [ "$1" != "bug15~0" ] && [ "$1" != "bug15" ]
    then
	echo "ALL_MD_TESTS+=${bugname}.interp.so ${bugname}.fix.so"
    fi

    if [ "${bugname}" = "${exename}" ]
    then
	local summaries=""
	for i in $(seq 1 $((${nr_bugs} - 1)) )
	do
	    summaries="${summaries} ${exename}~${i}.summary.canon4"
	done
	cat <<EOF
${bugname}.ced: ${summaries}  ec_driver ${static_files}
	./ec_driver ${static_files} \$@ ${summaries}
${bugname}.fix.c: s2f_driver ${static_files} ${summaries}
	./s2f_driver ${static_files} ${bugname}.fix.c ${summaries}
EOF
    fi

    if ! [ -z "$include_perf" ]
    then
	cat <<EOF
clean_files += ${bugname}.perf_dists ${bugname}.perf_data
MD_PERF_FILES += ${bugname}.perf_dists
EOF

	if [ "$bugname" != "${exename}" ]
	then
	    echo "MD_PERF_FILES+=${bugname}.crash_times_dist ${bugname}.build_interp_time"
	fi
    else
	echo "# no perf stuff: $include_perf, nr_bugs = $nr_bugs"
    fi
    echo clean_files+=${bugname}.{interp.so,fix.c,fix.so,ced,summary{,.canon0,.canon2,.canon3,.canon4},cep.c}
}

_emit_rules_for_exe() {
    echo "# _emit_rules_for_exe $*"
    local exename="${MD_TEST_DIR}/$1"
    local nr_summaries="$2"

    local static_files="${exename}.exe ${exename}.types.canon ${exename}.bcg ${exename}.db"
    cat <<EOF
.PRECIOUS: ${exename}.exe ${exename}.types ${exename}.bcg
EOF

    for i in $(seq 0 $((${nr_summaries} - 1)) )
    do
	cat <<EOF
${exename}~${i}.summary: ${exename}.summaries
	! [ -e $</${nr_summaries} ] && [ -e $</${i} ] && cp \$</${i} \$@
clean_files += ${exename}~${i}.summary
EOF
	emit_rules_for_bug "$1~$i" "$1" "$nr_summaries"
    done

    if [ "$nr_summaries" -ne 1 ]
    then
	emit_rules_for_bug "$1" "$1" "${nr_summaries}"
    fi

    for p in types bcg types.canon db exe db.timing
    do
	echo "clean_files+=${exename}.${p}"
    done

cat <<EOF
${exename}.build_summary_time: ./timing ${exename}.exe ${exename}.types.canon ${exename}.bcg ${exename}.db ./tests/minimal_direct/build_summary.sh canonicalise_crash_summary0 canonicalise_crash_summary2 canonicalise_crash_summary3 minimal_direct
	./timing 10 ${exename}.build_summary_time ./tests/minimal_direct/build_summary.sh ${exename}
clean_files += ${exename}.build_summary_time
MD_PERF_FILES+=${exename}.build_summary_time
EOF
}

emit_rules_for_exe_segv() {
    local exename="${MD_TEST_DIR}/$1"
    local static_files="${exename}.exe ${exename}.types.canon ${exename}.bcg ${exename}.db"
    cat <<EOF
${exename}.summaries: minimal_direct ${static_files} machines
	rm -rf \$@ crash_summaries induction.log logs generated_patch.c && \\
	mkdir logs && \\
	mkdir crash_summaries && \\
	SOS22_MINIMAL_DIRECT_TIMEOUT=600 ./minimal_direct ${static_files} && \\
	mv crash_summaries ${exename}.summaries
clean_dirs += ${exename}.summaries
EOF
    _emit_rules_for_exe "$1" "$2"
}

emit_rules_for_exe_assert() {
    local exename="${MD_TEST_DIR}/$1"
    local static_files="${exename}.exe ${exename}.types.canon ${exename}.bcg ${exename}.db"
    cat <<EOF
${exename}.summaries: minimal_direct ${static_files} machines
	rm -rf \$@ crash_summaries induction.log logs generated_patch.c && \\
	mkdir logs && \\
	mkdir crash_summaries && \\
	SOS22_MINIMAL_DIRECT_TIMEOUT=600 ./minimal_direct ${static_files} assertions && \\
	mv crash_summaries ${exename}.summaries
clean_dirs += ${exename}.summaries
EOF
    _emit_rules_for_exe "$1" "$2" "$3"
}

emit_rules_for_exe_dfree() {
    local exename="${MD_TEST_DIR}/$1"
    local static_files="${exename}.exe ${exename}.types.canon ${exename}.bcg ${exename}.db"
    cat <<EOF
${exename}.summaries: minimal_direct ${static_files} machines
	rm -rf \$@ crash_summaries induction.log logs generated_patch.c && \\
	mkdir logs && \\
	mkdir crash_summaries && \\
	SOS22_MINIMAL_DIRECT_TIMEOUT=600 ./minimal_direct ${static_files} doublefree && \\
	mv crash_summaries ${exename}.summaries
clean_dirs += ${exename}.summaries
EOF
    _emit_rules_for_exe "$1" "$2"
}
emit_rules_for_exe_icall() {
    local exename="${MD_TEST_DIR}/$1"
    local static_files="${exename}.exe ${exename}.types.canon ${exename}.bcg ${exename}.db"
    cat <<EOF
${exename}.summaries: minimal_direct ${static_files} machines
	rm -rf \$@ crash_summaries induction.log logs generated_patch.c && \\
	mkdir logs && \\
	mkdir crash_summaries && \\
	SOS22_MINIMAL_DIRECT_TIMEOUT=600 ./minimal_direct ${static_files} icall && \\
	mv crash_summaries ${exename}.summaries
clean_dirs += ${exename}.summaries
EOF
    _emit_rules_for_exe "$1" "$2"
}

rules() {
    cat <<EOF
${MD_TEST_DIR}:
	mkdir ${MD_TEST_DIR}
machines:
	mkdir machines
clean_dirs += machines
EOF
    for bug in 1 2 3 4 6 7 8 10 16
    do
	emit_rules_for_exe_segv bug${bug} 1
    done
    for bug in 5 11 12 13 17 18
    do
	emit_rules_for_exe_assert bug${bug} 1
    done
    for bug in 14
    do
	emit_rules_for_exe_dfree bug${bug} 1
    done
    for bug in 19
    do
	emit_rules_for_exe_icall bug${bug} 1
    done
    for bug in 9
    do
	emit_rules_for_exe_segv bug${bug} 2
    done
    for bug in 15
    do
	emit_rules_for_exe_segv bug${bug} 0
    done

    for i in `seq 3 2 100`
    do
	cat <<EOF
${MD_TEST_DIR}/complex_hb_${i}.c: ./tests/minimal_direct/mk_complex_hb.sh
	./tests/minimal_direct/mk_complex_hb.sh ${i} > \$@
${MD_TEST_DIR}/complex_hb_${i}.exe: ${MD_TEST_DIR}/complex_hb_${i}.c
	gcc -O -pthread -Wall -g \$< -o \$@
EOF
	emit_rules_for_exe_assert complex_hb_${i} 1 "no_exe"
    done

    for nr_reads in `seq 1 20`
    do
	for nr_writes in `seq 1 20`
	do
	    exe=complex_alias_${nr_reads}_${nr_writes}
	    cat <<EOF
${MD_TEST_DIR}/${exe}.c: ./tests/minimal_direct/mk_complex_aliasing.sh
	./tests/minimal_direct/mk_complex_aliasing.sh ${nr_writes} ${nr_reads} > \$@
EOF
	    emit_rules_for_exe_assert ${exe} 0 "no_exe"
	done
    done

    # Rules for building things.
    cat <<EOF
${MD_TEST_DIR}/%.interp.so: ${MD_TEST_DIR}/%.cep.c cep_interpreter.o
	gcc -ldl -shared -Isli/enforce_crash \$^ -o \$@
${MD_TEST_DIR}/%.fix.so: ${MD_TEST_DIR}/%.fix.c sli/patch_head.h sli/patch_skeleton_jump.c sli/patch_skeleton_common.c
	gcc -Wall -g -shared -fPIC -Isli \$< -o \$@

${MD_TEST_DIR}/%.types: ${MD_TEST_DIR}/%.exe ./tests/minimal_direct/build_types_table.sh /local/scratch/sos22/valgrind-ft-stage3/bin/valgrind
	./tests/minimal_direct/build_types_table.sh ./\$<
${MD_TEST_DIR}/%.bcg: ${MD_TEST_DIR}/%.exe ./tests/minimal_direct/build_call_graph.sh ./tests/minimal_direct/build_types_table.sh /local/scratch/sos22/valgrind-ft-stage3/bin/valgrind
	./tests/minimal_direct/build_call_graph.sh ./\$<
${MD_TEST_DIR}/%.types.canon: ${MD_TEST_DIR}/%.exe ${MD_TEST_DIR}/%.types canonicalise_types_table
	./canonicalise_types_table \$< ${MD_TEST_DIR}/\$*.types \$@
${MD_TEST_DIR}/%.db: ${MD_TEST_DIR}/%.exe ${MD_TEST_DIR}/%.types.canon ${MD_TEST_DIR}/%.bcg static
	./static \$< ${MD_TEST_DIR}/\$*.types.canon ${MD_TEST_DIR}/\$*.bcg \$@
${MD_TEST_DIR}/%.db.timing: ${MD_TEST_DIR}/%.exe ${MD_TEST_DIR}/%.types.canon ${MD_TEST_DIR}/%.bcg static timing
	./timing 10 \$@ ./static \$<.exe \$*.types.canon \$*.bcg \$*.db
${MD_TEST_DIR}/%.exe: ${MD_TEST_DIR}/%.c
	gcc -O -pthread -Wall -g \$< -o \$@
${MD_TEST_DIR}/bug%.exe: tests/minimal_direct/bug%.c
	gcc -O -pthread -Wall -g \$< -o \$@
EOF
    # Per-bug rules.  Relies on the fact that no test will ever
    # generate more than three bugs.
    for i in `seq 0 2`
    do
	cat <<EOF
${MD_TEST_DIR}/%~${i}.cep.c: ${MD_TEST_DIR}/%~${i}.ced ctoc_driver ${MD_TEST_DIR}/%.exe ${MD_TEST_DIR}/%.types.canon ${MD_TEST_DIR}/%.bcg ${MD_TEST_DIR}/%.db
	./ctoc_driver ${MD_TEST_DIR}/\$*.exe \$< ${MD_TEST_DIR}/\$*.types.canon ${MD_TEST_DIR}/\$*.bcg ${MD_TEST_DIR}/\$*.db \$@
${MD_TEST_DIR}/%~${i}.ced: ${MD_TEST_DIR}/%~${i}.summary.canon4 ec_driver ${MD_TEST_DIR}/%.exe ${MD_TEST_DIR}/%.types.canon ${MD_TEST_DIR}/%.bcg ${MD_TEST_DIR}/%.db
	./ec_driver ${MD_TEST_DIR}/\$*.exe ${MD_TEST_DIR}/\$*.types.canon ${MD_TEST_DIR}/\$*.bcg ${MD_TEST_DIR}/\$*.db \$@ \$<
${MD_TEST_DIR}/%~${i}.summary.canon4: ${MD_TEST_DIR}/%~${i}.summary.canon2 canonicalise_crash_summary0
	./canonicalise_crash_summary0 \$< \$@
${MD_TEST_DIR}/%~${i}.summary.canon2: ${MD_TEST_DIR}/%~${i}.summary.canon0 canonicalise_crash_summary2
	./canonicalise_crash_summary2 \$< \$@
${MD_TEST_DIR}/%~${i}.summary.canon0: ${MD_TEST_DIR}/%~${i}.summary canonicalise_crash_summary0
	./canonicalise_crash_summary0 \$< \$@
${MD_TEST_DIR}/%~${i}.fix.c: ${MD_TEST_DIR}/%~${i}.summary.canon4 s2f_driver ${MD_TEST_DIR}/%.exe ${MD_TEST_DIR}/%.types.canon ${MD_TEST_DIR}/%.bcg ${MD_TEST_DIR}/%.db
	./s2f_driver ${MD_TEST_DIR}/\$*.exe ${MD_TEST_DIR}/\$*.types.canon ${MD_TEST_DIR}/\$*.bcg ${MD_TEST_DIR}/\$*.db \$@ \$<
${MD_TEST_DIR}/%~${i}.perf_dists: ${MD_TEST_DIR}/harness ${MD_TEST_DIR}/%.exe ${MD_TEST_DIR}/%~0.fix.so ./tests/minimal_direct/perf_dist.sh /home/sos22/bin/check_dist /home/sos22/bin/discard_outliers.py
	./tests/minimal_direct/perf_dist.sh ${MD_TEST_DIR}/\$*.exe "${MD_TEST_DIR}/\$*~$i.fix.so" ${MD_TEST_DIR}/\$*~${i}.perf_data > ${MD_TEST_DIR}/\$*~${i}.perf_dists
EOF
    done

    # And now the harness
    cat <<EOF
${MD_TEST_DIR}/harness: ./tests/minimal_direct/harness.c
	gcc -g -Wall \$< -o \$@
clean_files += ${MD_TEST_DIR}/harness
EOF

    cat <<EOF
all_md_tests: \$(ALL_MD_TESTS)
all_md_perf: \$(MD_PERF_FILES)

.PRECIOUS: \$(MD_PERF_FILES)
EOF
}