MD_TEST_DIR=md_test_dir
targets=${MD_TEST_DIR}/harness

emit_rules_for_bug() {
    echo "# emit_rules_for_bug $*"
    local bugname="${MD_TEST_DIR}/$1"
    local exename="${MD_TEST_DIR}/$2"
    local static_files="${exename}.exe ${exename}.types.canon ${exename}.bcg ${exename}.db"
    cat <<EOF
${bugname}.interp.so: ${bugname}.cep.c cep_interpreter.o
	gcc -shared -Isli/enforce_crash \$^ -o \$@
${bugname}.fix.c: summary_to_fix ${static_files} ${bugname}.summary.canon4
	./summary_to_fix ${static_files} ${bugname}.fix.c ${bugname}.summary.canon4
${bugname}.fix.so: ${bugname}.fix.c sli/patch_head.h sli/patch_skeleton_jump.c sli/patch_skeleton_common.c
	gcc -Wall -g -shared -fPIC -Isli \$< -o \$@
${bugname}.ced: ${bugname}.summary.canon4  enforce_crash ${static_files}
	./enforce_crash ${static_files} \$@ \$<
${bugname}.cep.c: ${bugname}.ced ced_to_cep ${static_files}
	./ced_to_cep ${exename}.exe ${bugname}.ced ${bugname}.types.canon ${bugname}.bcg ${bugname}.db ${bugname}.cep.c
${bugname}.summary.canon4: canonicalise_crash_summary0 ${bugname}.summary.canon3
	./canonicalise_crash_summary0 ${bugname}.summary.canon3 ${bugname}.summary.canon4
${bugname}.summary.canon3: canonicalise_crash_summary3 ${bugname}.summary.canon2 ${exename}.exe ${exename}.types.canon
	./canonicalise_crash_summary3 ${bugname}.summary.canon2 ${exename}.exe ${exename}.types.canon ${bugname}.summary.canon3
${bugname}.summary.canon2: canonicalise_crash_summary2 ${bugname}.summary.canon0
	./canonicalise_crash_summary2 ${bugname}.summary.canon0 ${bugname}.summary.canon2
${bugname}.summary.canon0: canonicalise_crash_summary0 ${bugname}.summary
	./canonicalise_crash_summary0 ${bugname}.summary ${bugname}.summary.canon0
EOF
    for p in interp.so fix.c fix.so ced summary{,.canon0,.canon2,.canon3,.canon4} cep.c
    do
	echo "clean_files+=${bugname}.${p}"
    done
}

_emit_rules_for_exe() {
    echo "# _emit_rules_for_exe $*"
    local exename="${MD_TEST_DIR}/$1"
    local static_files="${exename}.exe ${exename}.types.canon ${exename}.bcg ${exename}.db"
    cat <<EOF
${exename}.types: ${exename}.exe ./tests/minimal_direct/build_types_table.sh /local/scratch/sos22/valgrind-ft-stage3/bin/valgrind
	./tests/minimal_direct/build_types_table.sh ./\$<
${exename}.bcg: ${exename}.exe ./tests/minimal_direct/build_call_graph.sh ./tests/minimal_direct/build_types_table.sh /local/scratch/sos22/valgrind-ft-stage3/bin/valgrind
	./tests/minimal_direct/build_call_graph.sh ./\$<
${exename}.types.canon: ${exename}.exe ${exename}.types canonicalise_types_table
	./canonicalise_types_table ${exename}.exe ${exename}.types \$@
${exename}.db: ${exename}.exe ${exename}.types.canon ${exename}.bcg static
	./static ${exename}.exe ${exename}.types.canon ${exename}.bcg ${exename}.db
${exename}.exe: tests/minimal_direct/$1.c
	gcc -O -pthread -Wall -g \$< -o \$@
.PRECIOUS: ${exename}.exe ${exename}.types ${exename}.bcg
EOF
    for p in types bcg types.canon db exe
    do
	echo "clean_files+=${exename}.${p}"
    done
}

simple_bug() {
    local bugname="${MD_TEST_DIR}/$1"
    echo "# simple_bug $1"
    cat <<EOF
${bugname}.summary: ${bugname}.summaries
	! [ -e $</1 ] && [ -e $</0 ] && cp \$</0 \$@
EOF
    emit_rules_for_bug "$1" "$1"
    echo "clean_files+=${bugname}.summary"
}
    
emit_rules_for_exe_segv() {
    local exename="${MD_TEST_DIR}/$1"
    local static_files="${exename}.exe ${exename}.types.canon ${exename}.bcg ${exename}.db"
    cat <<EOF
${exename}.summaries: minimal_direct ${static_files} machines
	rm -rf \$@ crash_summaries induction.log logs generated_patch.c && \\
	mkdir logs && \\
	mkdir crash_summaries && \\
	./minimal_direct ${static_files} && \\
	mv crash_summaries ${exename}.summaries
clean_dirs += ${exename}.summaries
EOF
    _emit_rules_for_exe "$1"
}

emit_rules_for_exe_assert() {
    local exename="${MD_TEST_DIR}/$1"
    local static_files="${exename}.exe ${exename}.types.canon ${exename}.bcg ${exename}.db"
    cat <<EOF
${exename}.summaries: minimal_direct ${static_files} machines
	rm -rf \$@ crash_summaries induction.log logs generated_patch.c && \\
	mkdir logs && \\
	mkdir crash_summaries && \\
	./minimal_direct ${static_files} assertions && \\
	mv crash_summaries ${exename}.summaries
clean_dirs += ${exename}.summaries
EOF
    _emit_rules_for_exe "$1"
}

rules() {
    cat <<EOF
${MD_TEST_DIR}:
	mkdir ${MD_TEST_DIR}
machines:
	mkdir machines
clean_dirs += machines
EOF
    for bug in 1 2 3 4 6 7 8 9
    do
	emit_rules_for_exe_segv bug${bug}
    done
    for bug in 5
    do
	emit_rules_for_exe_assert bug${bug}
    done

    # Most bugs are pretty simple
    for sbug in 1 2 3 4 6 7 8
    do
	simple_bug bug${sbug}
    done
    # 5 and 9 are more complex
    emit_rules_for_bug 5a 5
    emit_rules_for_bug 5b 5
    emit_rules_for_bug 9a 5
    emit_rules_for_bug 9b 5
    cat <<EOF
${MD_TEST_DIR}/bug5a.summary: ${MD_TEST_DIR}/bug5.summaries
	! [ -e ${MD_TEST_DIR}/bug5.summaries/2 ] && && cp ${MD_TEST_DIR}/bug5.summaries/0 ${MD_TEST_DIR}/bug5a.summary
${MD_TEST_DIR}/bug5b.summary: ${MD_TEST_DIR}/bug5.summaries
	! [ -e ${MD_TEST_DIR}/bug5.summaries/2 ] && && cp ${MD_TEST_DIR}/bug5.summaries/1 ${MD_TEST_DIR}/bug5b.summary
${MD_TEST_DIR}/bug9a.summary: ${MD_TEST_DIR}/bug9.summaries
	! [ -e ${MD_TEST_DIR}/bug9.summaries/2 ] && && cp ${MD_TEST_DIR}/bug9.summaries/0 ${MD_TEST_DIR}/bug9a.summary
${MD_TEST_DIR}/bug9b.summary: ${MD_TEST_DIR}/bug9.summaries
	! [ -e ${MD_TEST_DIR}/bug9.summaries/2 ] && && cp ${MD_TEST_DIR}/bug9.summaries/1 ${MD_TEST_DIR}/bug9b.summary
EOF
    for x in 5a 5b 9a 9b
    do
	echo "clean_files += ${MD_TEST_DIR}/bug${x}.summary"
    done

    # And now the harness
    cat <<EOF
${MD_TEST_DIR}/harness: ./tests/minimal_direct/harness.c
	gcc -g -Wall \$< -o \$@
clean_files += ${MD_TEST_DIR}/harness
EOF
}